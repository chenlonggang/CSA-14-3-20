**** just for fun****
 If you just want try it for fun,find guids in usage.txt file,then you will know how to drive it.

****build your own project****

 If you want use the CSA in you program,the csa.a is ready for you,if not, use *make* to build it. you must include the CSA.h in your program,and then
  g++ youprogram.cpp -o yourtarget csa.a 

**** use class CSA in your own code****
 You will find how to use the class CSA int the CSA.h file.The most important four methods are :
  
   ----CSA(char * sourcefile,i32 L,i32 D) 
   ----Counting(char * Pattern,int &num)
   ----Locating(char * Pattern,i32 &num,i32 *&pos)
   ----Decompress(i32 i,i32 len,char *p)
    
   ++CSA(char * sourcefile,i32 L,i32 D):
     +build a csa index for the sourcefile.
      L:the sampling ratio of Phi array,that means every Phi[L*i] is saved directly.the default value is 128.
      D: the sampling ratio of sa array,just like L.the default value is 32.

   ++Counting(char * Pattern,int &num):
     +count how many times the pattern occures in the file
      Pattern : the pattern you want to sraech.
      num: the occs of the pattern

   ++Locating(char * Pattern,i32 &num,i32 *&pos)
     +Enumerate all the positions of the pattern
      pos: the positions of the occs of the pattern.it's your responsibility to get and free the heap space for pos.

   ++Decompress(i32 i,i32 len,char *p)
     +decompress a substring p[i...i+len-1] of the original text. it's your responsibility to get and free the heap space for p.
      i:the start position of the substring 
      len: the length of the substring.

**** example****
 this is a show writed in c++ to teach you to use the CSA in you code:
 #inclide<...>
 #include<CSA.h>
 main(int argc, char* argv[])
 {
     char sourcefile[100]="....";
     CSA csa(sourcefile,128,64);
     /* if you want to use the default value of L and D:
      CSA csa(sourcefile);
     */
     char pattern[100]="...";
     int num=0;
     int * pos=NULL;
     char * sub=NULL;
     int start=xx;
     int len=yy;
     ...
     csa->Counting(pattern,num);
     ...
     csa->Locating(pattern,num,pos);
     ...
     delete [] pos;
     ...
     csa->Decompress(start,len,sub);
     delete [] sub;
     ...
}

























 
  
